"""
ai_handler.py - –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM API –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import asyncio
import logging
from typing import Dict, List, Optional, Union

import aiohttp
import discord

from config import BotConfig, MessageUtils


class AIHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å LLM API."""

    def __init__(self, config: BotConfig):
        self.config = config
        self.http_session: Optional[aiohttp.ClientSession] = None
        self.logger = logging.getLogger(self.__class__.__name__)
        self.utils = MessageUtils()

    async def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP —Å–µ—Å—Å–∏–∏."""
        connector = aiohttp.TCPConnector(limit=30, limit_per_host=10)
        timeout = aiohttp.ClientTimeout(total=self.config.timeout)
        self.http_session = aiohttp.ClientSession(
            connector=connector,
            timeout=timeout,
            headers={"User-Agent": "Discord-LLM-Bot/1.0"}
        )
        self.logger.info("AI Handler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def cleanup(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        if self.http_session and not self.http_session.closed:
            await self.http_session.close()
            self.logger.info("HTTP —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")

    async def query_ai(self, messages: List[Dict[str, str]]) -> str:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ LLM API —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        if not self.http_session or self.http_session.closed:
            self.logger.error("HTTP —Å–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
            return "‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º."

        headers = {
            "Authorization": f"Bearer {self.config.ai_api_key}",
            "Content-Type": "application/json"
        }

        payload = {
            "model": self.config.llm_model,
            "messages": messages,
            "stream": False,
            "max_tokens": self.config.max_tokens,
            "temperature": self.config.temperature
        }

        try:
            async with self.http_session.post(
                    self.config.api_url,
                    headers=headers,
                    json=payload
            ) as response:
                if response.status == 429:
                    self.logger.warning("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API")
                    return "‚è∞ –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."

                response.raise_for_status()
                data = await response.json()

                content = data.get('choices', [{}])[0].get('message', {}).get('content')
                if content:
                    return content.strip()

                self.logger.error(f"–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API: {data}")
                return "ü§î –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò."

        except aiohttp.ClientResponseError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ API (—Å—Ç–∞—Ç—É—Å {e.status}): {e.message}")
            if e.status == 401:
                return "üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            elif e.status == 503:
                return "üîß –°–µ—Ä–≤–∏—Å –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            else:
                return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ò–ò (–∫–æ–¥ {e.status}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        except asyncio.TimeoutError:
            self.logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")
            return "‚è±Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ò–ò –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å."

        except Exception as e:
            self.logger.exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ò–ò")
            return "üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


class ConversationManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞."""

    def __init__(self, config: BotConfig, bot_user: discord.User):
        self.config = config
        self.bot_user = bot_user
        self.logger = logging.getLogger(self.__class__.__name__)
        self.utils = MessageUtils()

    def clean_message_content(self, content: str, display_name: str, role: str) -> str:
        """–û—á–∏—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        # –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞
        content = content.replace(f'<@!{self.bot_user.id}>', '').replace(f'<@{self.bot_user.id}>', '').strip()

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if role == "user" and content:
            content = f"{display_name}: {content}"

        return content

    async def get_formatted_history(self, message: discord.Message) -> List[Dict[str, str]]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
        history_messages = [
            msg async for msg in message.channel.history(
                limit=self.config.max_history_messages,
                before=message.created_at
            )
        ]

        conversation = []
        for msg in reversed(history_messages):
            role = "assistant" if msg.author == self.bot_user else "user"
            content = self.clean_message_content(msg.content, msg.author.display_name, role)

            if content.strip():  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                conversation.append({"role": role, "content": content})

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        current_content = self.clean_message_content(
            message.content,
            message.author.display_name,
            "user"
        )
        conversation.append({"role": "user", "content": current_content})

        return [self.utils.get_system_prompt()] + conversation

    async def get_formatted_history_from_channel(
            self,
            channel: Union[discord.TextChannel, discord.Thread],
            user_message: str,
            user: discord.User
    ) -> List[Dict[str, str]]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è slash –∫–æ–º–∞–Ω–¥."""
        history_messages = [
            msg async for msg in channel.history(limit=self.config.max_history_messages)
        ]

        conversation = []
        for msg in reversed(history_messages):
            role = "assistant" if msg.author == self.bot_user else "user"
            content = self.clean_message_content(msg.content, msg.author.display_name, role)

            if content.strip():
                conversation.append({"role": role, "content": content})

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conversation.append({
            "role": "user",
            "content": f"{user.display_name}: {user_message}"
        })

        return [self.utils.get_system_prompt()] + conversation

    async def get_simple_history(self, user_message: str, user: discord.User) -> List[Dict[str, str]]:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–∞–Ω–∞–ª–∞."""
        return [
            self.utils.get_system_prompt(),
            {"role": "user", "content": f"{user.display_name}: {user_message}"}
        ]